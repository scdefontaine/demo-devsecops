
# Dynamic Environments - controlled in github repo settings

  # global variables
    # REGISTRY = docker.io/sylenus
    # DOCKER_USER = sylenus
    # DOCKER_TOKEN = <docker-hub-access-token>
    # GCP_PROJECT_ID = sean-defontaine
    
    # production
    # IMAGE_TAG = latest

  # staging
    # IMAGE_TAG = staging

  # development
    # IMAGE_TAG = dev


    name: Deploy infrastructure

    on:
      workflow_dispatch:
    
    
    jobs:
    
      # use github.ref_name for push events
      set-environment:
        runs-on: ubuntu-20.04
        continue-on-error: false
        outputs:
          ENVIRONMENT: ${{ steps.set-environment.outputs.ENVIRONMENT }}
          ENV: ${{ steps.set-environment.outputs.ENV }}
        steps:
          - id: set-environment
            run: |
              if [[ "${{ github.ref_name }}" == "dev" ]]; then
                echo "ENVIRONMENT=development" >> $GITHUB_OUTPUT
                echo "ENV=dev" >> $GITHUB_OUTPUT
              fi
              if [[ "${{ github.ref_name }}" == "staging" ]]; then
                echo "ENVIRONMENT=staging" >> $GITHUB_OUTPUT
                echo "ENV=staging" >> $GITHUB_OUTPUT
              fi
              if [[ "${{ github.ref_name }}" == "main" ]]; then
                echo "ENVIRONMENT=production" >> $GITHUB_OUTPUT
                echo "ENV=prod" >> $GITHUB_OUTPUT
              fi
      
      terraform-destroy:
        runs-on: ubuntu-20.04
        continue-on-error: false
        needs:
          - set-environment
        environment: ${{ needs.set-environment.outputs.ENVIRONMENT }}
        env:
          REGISTRY: ${{ vars.REGISTRY }}
          GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
          IMAGE_TAG: ${{ vars.IMAGE_TAG }}
          GCS_BUCKET: ${{ vars.GCS_BUCKET }}
          SOURCE_IP_ADDRESS: ${{ secrets.SOURCE_IP_ADDRESS }}
          ENV: ${{ needs.set-environment.outputs.ENV }}
          CLUSTER_NAME: kube-cluster
        steps:
          - name: Checkout codebase
            uses: actions/checkout@v4
            
          - name: Authenticate with gcloud
            uses: google-github-actions/auth@v1
            continue-on-error: false
            with:
              credentials_json: ${{ secrets.GCP_SA_KEY }}
          
          - name: Setup gcloud
            continue-on-error: false
            uses: google-github-actions/setup-gcloud@v1
          
          - name: Setup Terraform
            continue-on-error: false
            run: |
              wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
              echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
              sudo apt update && sudo apt install terraform
              terraform --help
          
          - name: Terraform Init & Plan
            continue-on-error: false
            run: |
              cd terraform
              if [[ "${{ env.GCS_BUCKET }}" == "" ]]; then
                terraform init -input=false
              fi
              if [[ "${{ env.GCS_BUCKET }}" != "" ]]; then
                terraform init -input=false \
                  -backend-config="bucket=${{ env.GCS_BUCKET }}" \
                  -backend-config="prefix=terraform/state"
              fi
          
          - name: Terraform Deploy
            continue-on-error: false
            run: |
              cd terraform
              if terraform destroy -input=false -auto-approve; then
                echo "Teardown succeeded"
              else
                echo "Service account not fully created - redeploying..."
                terraform apply -input=false -auto-approve tfplan
              fi
    
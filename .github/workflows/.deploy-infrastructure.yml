
# Dynamic Environments - controlled in github repo settings

  # global variables
    # REGISTRY = docker.io/sylenus
    # DOCKER_USER = sylenus
    # DOCKER_TOKEN = <docker-hub-access-token>
    # GCP_PROJECT_ID = sean-defontaine
    # KUBECONFIG_FILE = <string-contents-of-kube-config>
    
    # production
    # IMAGE_TAG = latest
    # ENV = prod

  # staging
    # IMAGE_TAG = staging
    # ENV = staging

  # development
    # IMAGE_TAG = dev
    # ENV = dev


name: Deploy infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true

jobs:
  
  terraform-deploy:
    runs-on: ubuntu-20.04
    continue-on-error: false
    environment: ${{ inputs.environment }}
    env:
      REGISTRY: ${{ vars.REGISTRY }}
      GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
      IMAGE_TAG: ${{ vars.IMAGE_TAG }}
      GCS_BUCKET: ${{ vars.GCS_BUCKET }}
      SOURCE_IP_ADDRESS: ${{ secrets.SOURCE_IP_ADDRESS }}
      ENV: ${{ vars.ENV }}
      CLUSTER_NAME: kube-cluster
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4
        
      - name: Authenticate with gcloud
        uses: google-github-actions/auth@v1
        continue-on-error: false
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Setup gcloud
        continue-on-error: false
        uses: google-github-actions/setup-gcloud@v1
      
      - name: Setup Terraform
        continue-on-error: false
        run: |
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform
          terraform --help
      
      - name: Terraform Init & Plan
        continue-on-error: false
        run: |
          cd terraform
          if [[ "$GCS_BUCKET" == "" ]]; then
            terraform init -input=false
          fi
          if [[ "$GCS_BUCKET" != "" ]]; then
            terraform init -input=false \
              -backend-config="bucket=$GCS_BUCKET" \
              -backend-config="prefix=terraform/state"
          fi
          terraform plan -input=false \
            -var="project=$GCP_PROJECT_ID" \
            -var="cluster_name=$CLUSTER_NAME" \
            -var="environment=$ENV" \
            -var="source_ip_address=$SOURCE_IP_ADDRESS" \
            -out=tfplan
      
      - name: Terraform Deploy
        continue-on-error: false
        run: |
          cd terraform
          if terraform apply -input=false -auto-approve tfplan; then
            echo "Deployment succeeded"
          else
            echo "Service account not fully created - redeploying..."
            terraform apply -input=false -auto-approve tfplan
          fi
